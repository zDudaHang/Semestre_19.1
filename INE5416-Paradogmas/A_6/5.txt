O type serve para facilitar a leitura e escrita dos códigos, como por exemplo:

type Nome = String
type Idade = Int
type Peso = Float
type Pessoa = (Nome,Idade,Peso)

Sendo que fazer:

type Pessoa = (String, Int, Float)

seria a mesma coisa, mas a leitura do código já ficaria mais complicada, uma vez que não seria possível determinar quais os significados dos elementos da tupla presente no tipo Pessoa. Logo, o type é usado como um sinônimo.

O data permite a criação de vários valores para um único tipo, como por exemplo:

data Forma = Circulo Float | Retangulo Float Float | Triangulo Float Float

Ou seja, existem três construtores diferentes com parâmetros distintos para cada forma declarada no escopo do data. Assim, ao chamar um dos construtores, o compilador deverá comparar com cada construtor e depois verificar se todos os parâmetros se encontram e se os tipos são correspondentes aos declarados. Enquanto que com o newtype, existe o isomorfismo, ou seja, os tipos são correspondentes independente do nome atribuído, e é permitido usar um único construtor com apenas um, parâmetro. Dessa forma, o compilador não precisa se preocupar com a verificação de construtor, parâmetros e seus tipos na chamada do construtor, uma vez que é garantido. Logo, não seria permitido fazer isto:

newtype Forma = Circulo Float | Retangulo Float Float | Triangulo Float Float

Mas sim:

newtype Circulo Float = Circulo Float
newtype Retangulo Float Float = Retangulo (Float, Float)
newtype Triangulo Float Float = Triangulo (Float, Float)

Observe o código do arquivo 5.hs, onde é demonstrado o uso do type, data e newtype e o execute para observar os resultados.